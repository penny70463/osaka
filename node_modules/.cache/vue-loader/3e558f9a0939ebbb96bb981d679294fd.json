{"remainingRequest":"/Users/penny_kuo/Penny/osaka/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/penny_kuo/Penny/osaka/src/views/map.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/penny_kuo/Penny/osaka/src/views/map.vue","mtime":1578800783657},{"path":"/Users/penny_kuo/Penny/osaka/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/penny_kuo/Penny/osaka/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/penny_kuo/Penny/osaka/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/penny_kuo/Penny/osaka/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/penny_kuo/Penny/osaka/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n#map{\r\n\theight:500px;\r\n\twidth:100%;\r\n}\r\n",{"version":3,"sources":["map.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmNA;AACA;AACA;AACA","file":"map.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n\t<div>\r\n\t\t<h2>map here</h2>\r\n\t\t<div\r\n\t\t\tid=\"map\"\r\n\t\t\tclass=\"google-map\"\r\n\t\t/>\r\n\t</div>\r\n</template>\r\n<script>\r\nimport { mapActions, mapState, mapGetters, mapMutations } from 'vuex';\r\nimport { mapFields } from 'vuex-map-fields';\r\nimport { osakaPass } from '../dummy_data/dataList';\r\n\r\nexport default {\r\n\tprops: {\r\n\t\tcenter: {\r\n\t\t\ttype: Object,\r\n\t\t\tdefault: () => ({ lat: 34.669203, lng: 135.503570 }),\r\n\t\t},\r\n\t\tzoom: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 12,\r\n\t\t},\r\n\t\tstreetViewControl: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: true,\r\n\t\t},\r\n\t\tmapTypeControl: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: true,\r\n\t\t},\r\n\t\tfullscreenControl: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: true,\r\n\t\t},\r\n\t\tzoomControl: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: true,\r\n\t\t},\r\n\t\trestaurants: {\r\n\t\t\ttype: Array,\r\n\t\t\tdefault: () => [\r\n\t\t\t],\r\n\t\t},\r\n\t\trequests: {\r\n\t\t\ttype: Array,\r\n\t\t\tdefault: () => [\r\n\t\t\t],\r\n\t\t},\r\n\t},\r\n\tcomputed: {\r\n\t\t...mapState('Home', [\r\n\t\t\t'markUrl',\r\n\t\t\t'passCategory',\r\n\t\t\t'queryString',\r\n\t\t\t'currentPosition',\r\n\t\t\t'queryDistance',\r\n\t\t\t'destinations',\r\n\t\t]\r\n\t\t),\r\n\t\t...mapGetters('Home', [\r\n\t\t\t'convertOsakaPass',\r\n\t\t]),\r\n\t\tqueryStringChange() {\r\n\t\t\treturn this.queryString;\r\n\t\t},\r\n\t\tcurrPosition() {\r\n\t\t\treturn this.currentPosition;\r\n\t\t},\r\n\t},\r\n\tdata() {\r\n\t\treturn {\r\n\t\t\tmap: null,\r\n\t\t\tinfowindow: null,\r\n\t\t\tmarkers: [],\r\n\t\t\tlocations: [],\r\n\t\t\tosakaPass,\r\n\t\t};\r\n\t},\r\n\twatch: {\r\n\t\tcenter(val) {\r\n\t\t\tthis.resetCenter();\r\n\t\t},\r\n\t\trequests() {\r\n\t\t\tthis.initMap();\r\n\t\t\tthis.passReq();\r\n\t\t},\r\n\t\tqueryStringChange() {\r\n\t\t\tthis.passReq();\r\n\t\t},\r\n\t\tcurrPosition() {\r\n\t\t\tthis.initMap();\r\n\t\t\tthis.currMarker();\r\n\t\t},\r\n\t},\r\n\tmounted() {\r\n\t\tthis.initMap();\r\n\t\tthis.passReq();\r\n\t},\r\n\tmethods: {\r\n\t\t...mapActions('Home', [\r\n\t\t\t\r\n\t\t]),\r\n\t\tinitMap() {\r\n\t\t\tthis.map = new google.maps.Map(document.getElementById('map'), {\r\n\t\t\t\tcenter: this.center,\r\n\t\t\t\tzoom: this.zoom,\r\n\t\t\t\tmaxZoom: 20,\r\n\t\t\t\tminZoom: 3,\r\n\t\t\t\tstreetViewControl: this.streetViewControl,\r\n\t\t\t\tmapTypeControl: this.mapTypeControl,\r\n\t\t\t\tfullscreenControl: this.fullscreenControl,\r\n\t\t\t\tzoomControl: this.zoomControl,\r\n\t\t\t});\r\n\t\t},\r\n\t\tresetCenter(lat, lng) {\r\n\t\t\t// set center\r\n\t\t\tthis.map.panTo({ lat: lat || this.center.lat, lng: lng || this.center.lng });\r\n\t\t},\r\n\t\tclearMarkers() {\r\n\t\t\tthis.markers.forEach(marker => marker.setMap(null));\r\n\t\t\tthis.markers = [];\r\n\t\t},\r\n\t\t\r\n\t\tasync getPlaces(req, type) {\r\n\t\t\tawait this.$store.commit('Home/setMarkUrl', type, { root: true });\r\n\t\t\tlet service = new google.maps.places.PlacesService(this.map);\r\n\t\t\tlet map2 = this.map;\r\n\t\t\t\r\n\t\t\tservice.findPlaceFromQuery(req.queryObj, function(results, status) {\r\n\t\t\t\tif(status == 'OK') {\r\n\t\t\t\t\tlet marker = new google.maps.Marker({\r\n          \t\t\t\tmap: map2,\r\n\t\t\t\t  \t\tposition: results[0].geometry.location,\r\n\t\t\t\t \t\t icon: {\r\n\t\t\t\t\t\t\turl: 'http://maps.google.com/mapfiles/kml/pushpin/' + type,\r\n\t\t\t\t\t\t\tsize: new google.maps.Size(50, 50),\r\n\t\t\t\t\t\t\torigin: new google.maps.Point(0, 0),\r\n\t\t\t\t\t\t\tanchor: new google.maps.Point(17, 34),\r\n\t\t\t\t\t\t\tscaledSize: new google.maps.Size(50, 50),\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tgoogle.maps.event.addListener(marker, 'click', function() {\r\n\t\t\t\t\t\tlet infowindow = new google.maps.InfoWindow({\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tinfowindow.setContent(`${results[0].name} : ${results[0].formatted_address}`);\r\n\t\t\t\t\t\tinfowindow.open(this.map, marker);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t//若為搜尋結果,resetCenter\r\n\t\t\t\tif(type === 'red-pushpin.png') {\r\n\t\t\t\t\tmap2.panTo(results[0].geometry.location);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\t\tasync passReq() {\r\n\t\t\tfunction test(val) {\r\n\t\t\t\tif(val.type) {\r\n\t\t\t\t\treturn 'red-pushpin.png';\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn 'wht-pushpin.png';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor(let req of this.requests) {\r\n\t\t\t\tawait this.getPlaces(req, test(req));\r\n\t\t\t}\r\n\t\t},\r\n\t\ttest(elm, idx) {\r\n\t\t\tlet service = new google.maps.places.PlacesService(this.map);\r\n\t\t\tservice.findPlaceFromQuery({ query: elm,\r\n\t\t\t\tfields: ['name', 'geometry', 'formatted_address'] }, this.test2(idx));\r\n\t\t},\r\n\t\ttest2(idx) {\r\n\t\t\t//destinations.push(results[0].geometry.location);\r\n\t\t\treturn (results, status)=>{\r\n\t\t\t\tconsole.log(results[0].geometry.location, idx);\r\n\t\t\t};\r\n\t\t},\r\n\t\t//經緯度create Marker\r\n\t\tasync currMarker() {\r\n\t\t\tlet temp = [];\r\n\t\t\tObject.values(this.osakaPass).forEach(elm=>{\r\n\t\t\t\telm.forEach(el=>{\r\n\t\t\t\t\ttemp = temp.concat(el);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\tlet marker = new google.maps.Marker({\r\n          \t\t\t\tmap: this.map,\r\n\t\t\t\t  \t\tposition: new google.maps.LatLng(this.currPosition.lat, this.currPosition.lng),\r\n\t\t\t});\r\n\t\t\tgoogle.maps.event.addListener(marker, 'click', function() {\r\n\t\t\t\tlet infowindow = new google.maps.InfoWindow({\r\n\t\t\t\t});\r\n\t\t\t\tinfowindow.setContent(`your position`);\r\n\t\t\t\tinfowindow.open(this.map, marker);\r\n\t\t\t});\r\n\t\t\tthis.resetCenter(this.currPosition.lat, this.currPosition.lng);\r\n\t\t\tlet originPosition = new google.maps.LatLng(this.currPosition.lat, this.currPosition.lng);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttemp.forEach((elm, idx)=>{\r\n\t\t\t\tthis.test(elm, idx);\r\n\t\t\t});\r\n\t\t},\r\n\t},\r\n};\r\n</script>\r\n<style>\r\n#map{\r\n\theight:500px;\r\n\twidth:100%;\r\n}\r\n</style>"]}]}